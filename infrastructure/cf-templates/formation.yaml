AWSTemplateFormatVersion: 2010-09-09
Description: craft-data-services

#Parameters:

Resources:
  ScaleUpPolicy:
    Type: AWS::AutoScaling::ScalingPolicy
    Properties:
      AdjustmentType: ChangeInCapacity
      AutoScalingGroupName:
        !Ref: AutoScalingGroup
      Cooldown: '300'
      ScalingAdjustment: '1'
      
  CPUAlarmHigh:
    Type: AWS::CloudWatch::Alarm
    Properties:
      EvaluationPeriods: '1'
      Statistic: Average
      Threshold: '10'
      AlarmDescription: Alarm if CPU too high or metric disappears indicating instance is down
      Period: '60'
      AlarmActions:
      - !Ref: ScaleUpPolicy
      Namespace: AWS/EC2
      Dimensions:
      - Name: AutoScalingGroupName
        Value:
          !Ref: AutoScalingGroup
      ComparisonOperator: GreaterThanThreshold
      MetricName: CPUUtilization

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    CreationPolicy:
      ResourceSignal:
        Count: 1
        Timeout: PT600S

    Properties:
      LaunchConfigurationName: !Ref InstanceLaunchConfig
      LoadBalancerNames:
        - Fn::ImportValue:
            !Sub vpc-bc481fc5:craft-data-services-app-AppElb:name
      # internal subnets
      VPCZoneIdentifier:
        - "subnet-1f9e2366" 
        - "subnet-baea78e0"
        - "subnet-d664b89d"
      MaxSize: 12
      MinSize: 3
      HealthCheckType: ELB
      HealthCheckGracePeriod: 720
      TerminationPolicies:
      - OldestInstance
      Tags:
      - Key: Name
        Value:
          Ref: AWS::StackName
        PropagateAtLaunch: true

  InstanceLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      BlockDeviceMappings:
        -
          DeviceName: /dev/sda1
          Ebs:
            VolumeSize: 12
            VolumeType: gp2
      IamInstanceProfile:
        Fn::ImportValue:
          !Sub vpc-bc481fc5:craft-data-services-app-InstanceRoleProfile:name
      KeyName: flask-key-west2
      ImageId: ami-7dd1b105
      InstanceType: t2.micro
      SecurityGroups:
        - Fn::ImportValue:
            !Sub vpc-bc481fc5:craft-demo-base-app-DataServicesAppSg:id
        - sg-28923956
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash

          # Temporarily override the default umask of 0077
          umask 0022

          # Set the default region for the AWS CLI/SDK
          echo export AWS_DEFAULT_REGION=${AWS::Region} > /etc/profile.d/aws_default_region.sh && . /etc/profile.d/aws_default_region.sh

          mkdir -p /tmp/deploy
          cd /tmp/deploy
          skip_gpg_and_boxset_download=false
          if $skip_gpg_and_boxset_download;
          then
              # Return success
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName}
          else
            ###### Download chef out of s3 ######s
            # 496911069803-us-west-2-artifacts/chef/cookbooks.zip
            aws s3 cp s3://496911069803-us-west-2-artifacts/chef/cookbooks.zip ${AWS::StackName}-chef.zip
            aws s3 cp s3://496911069803-us-west-2-artifacts/data-service/craftdemo-data/dist/indecision-1.7.zip indecision.zip
            
            if [ $? -ne 0 ]; then
              # Unrecoverable error, so fail fast
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName} --success false
            fi

            unzip -o ${AWS::StackName}-chef.zip -d chef
            cd chef

            ###### Run Chef ######
            mkdir -p /var/log/chef

            ls config/solo.rb
            ls nodes/data-service/us-west-2/dev.json

            chef-solo -c config/solo.rb -j nodes/data-service/us-west-2/dev.json -l debug --force-logger

            if [ $? -eq 0 ]; then
              # All done!
              cfn-signal --region ${AWS::Region} --resource AutoScalingGroup --stack ${AWS::StackName}
            else
              # Deploy failed upload logs and die
              INSTANCE_ID=`curl http://169.254.169.254/latest/meta-data/instance-id`
              curl -s http://169.254.169.254/latest/user-data > /var/log/user-data.log
              # flask-west2-prod-west2-logs/fail_deploys/
              for log in /var/log/chef/chef.log /var/log/userdata.log /var/log/boot.log /var/log/cloud-init-output.log; do
                [ -f $log ] && aws s3 cp --acl bucket-owner-full-control $log s3://flask-west2-prod-west2-logs/fail_deploys/${AWS::StackName}/$INSTANCE_ID/`basename $log`
              done
              shutdown -h now
            fi
          fi

Outputs:
  InstanceAutoScalingGroup:
    Value: !Ref AutoScalingGroup
    Description: App instance ID
